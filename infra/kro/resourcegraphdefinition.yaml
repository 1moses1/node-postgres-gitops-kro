# ✅ FINAL, CORRECTED resourcegraphdefinition.yaml
apiVersion: kro.run/v1alpha1
kind: ResourceGraphDefinition
metadata:
  name: form-postgres-rgd
spec:
  schema:
    apiVersion: v1alpha1
    kind: FormApp
    spec:
      name: string
      image: string | default=""
      db: boolean | default=false
      isApp: boolean | default=false
      isDb: boolean | default=false
      ingress:
        enabled: boolean | default=false
      # ✅ THE FINAL FIX IS HERE
      volumeClaimTemplates:
        type: array
        items: {} # This is the simplest, most compatible way to say "array of any object"

  resources:
    - id: postgresInitScript
      includeWhen:
        - ${schema.spec.isDb}
      template:
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: formapp-postgres-init
        data:
          init-db.sql: |
            CREATE TABLE IF NOT EXISTS submissions (
              id SERIAL PRIMARY KEY,
              name TEXT NOT NULL,
              email TEXT NOT NULL,
              created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );

    - id: deployment
      includeWhen:
        - ${schema.spec.isApp}
      template:
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: ${schema.spec.name}
        spec:
          replicas: 2
          selector:
            matchLabels:
              app: ${schema.spec.name}
          template:
            metadata:
              labels:
                app: ${schema.spec.name}
            spec:
              containers:
                - name: ${schema.spec.name}
                  image: ${schema.spec.image}
                  imagePullPolicy: Always
                  ports:
                    - containerPort: 8086
                  env:
                    - name: PGHOST
                      value: postgres-svc
                    - name: PGUSER
                      value: postgres
                    - name: PGPASSWORD
                      value: postgres
                    - name: PGDATABASE
                      value: formdb
                    - name: PGPORT
                      value: "5432"
                    - name: PORT
                      value: "8086"
                  readinessProbe:
                    httpGet:
                      path: /
                      port: 8086
                    initialDelaySeconds: 10
                    periodSeconds: 5
                  livenessProbe:
                    httpGet:
                      path: /
                      port: 8086
                    initialDelaySeconds: 15
                    periodSeconds: 10

    - id: appService
      includeWhen:
        - ${schema.spec.isApp}
      template:
        apiVersion: v1
        kind: Service
        metadata:
          name: ${schema.spec.name}-svc
        spec:
          type: LoadBalancer
          selector:
            app: ${schema.spec.name}
          ports:
            - port: 8086
              targetPort: 8086

    - id: statefulset
      includeWhen:
        - ${schema.spec.isDb}
      template:
        apiVersion: apps/v1
        kind: StatefulSet
        metadata:
          name: ${schema.spec.name}
        spec:
          selector:
            matchLabels:
              app: ${schema.spec.name}
          serviceName: ${schema.spec.name}-svc
          replicas: 1
          volumeClaimTemplates:
            - metadata:
                name: postgres-data
              spec:
                accessModes: [ "ReadWriteOnce" ]
                storageClassName: longhorn
                resources:
                  requests:
                    storage: 1Gi
          template:
            metadata:
              labels:
                app: ${schema.spec.name}
            spec:
              containers:
                - name: ${schema.spec.name}
                  image: bitnami/postgresql:12.1.0
                  env:
                    - name: POSTGRESQL_DATABASE
                      value: formdb
                    - name: POSTGRESQL_USERNAME
                      value: postgres
                    - name: POSTGRESQL_PASSWORD
                      value: postgres
                  ports:
                    - containerPort: 5432
                  volumeMounts:
                    - name: init-script-volume
                      mountPath: /docker-entrypoint-initdb.d
                    - name: postgres-data
                      mountPath: /var/lib/postgresql/data
              volumes:
                - name: init-script-volume
                  configMap:
                    name: formapp-postgres-init

    - id: postgresService
      includeWhen:
        - ${schema.spec.isDb}
      template:
        apiVersion: v1
        kind: Service
        metadata:
          name: ${schema.spec.name}-svc
        spec:
          selector:
            app: ${schema.spec.name}
          ports:
            - port: 5432
              targetPort: 5432

    - id: ingress
      includeWhen:
        - ${schema.spec.ingress.enabled}
      template:
        apiVersion: networking.k8s.io/v1
        kind: Ingress
        metadata:
          name: ${schema.spec.name}-ingress
        spec:
          rules:
            - http:
                paths:
                  - path: "/"
                    pathType: Prefix
                    backend:
                      service:
                        name: ${schema.spec.name}-svc
                        port:
                          number: 8086