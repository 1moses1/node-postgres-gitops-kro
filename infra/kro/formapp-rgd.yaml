# formapp-rgd.yaml
apiVersion: kro.run/v1alpha1
kind: ResourceGraphDefinition
metadata:
  name: form-postgres-rgd
spec:
  schema:
    apiVersion: v1alpha1
    kind: FormApp
    spec:
      name: string
      # The application configuration
      # This section defines the application deployment and service
      app:
        enabled: boolean | default=true
        name: string
        image: string
        # replicas: integer | default=2
       # HPA configuration for application
        hpa:
          enabled: boolean | default=true
          minReplicas: integer | default=2
          maxReplicas: integer | default=10
          targetCPUUtilizationPercentage: integer | default=70
          targetMemoryUtilizationPercentage: integer | default=80
        # Resource requests and limits for HPA to work properly
        resources:
          requests:
            cpu: string | default="100m"
            memory: string | default="128Mi"
          limits:
            cpu: string | default="500m"
            memory: string | default="512Mi"
        # Service configuration
        service:
          type: string | default="LoadBalancer"
          port: integer | default=8086
          targetPort: integer | default=8086
        # Ingress configuration
        ingress:
          enabled: boolean | default=false
      # The database configuration
      # This section defines the database deployment, service, and storage
      database:
        enabled: boolean | default=true
        name: string
        image: string | default="bitnami/postgresql:12.1.0"
        replicas: integer | default=2
        dbName: string | default="formdb"
        username: string | default="postgres"
        password: string | default="postgres"
        # Resource requests and limits for HPA to work properly
        resources:
          requests:
            cpu: string | default="250m"
            memory: string | default="256Mi"
          limits:
            cpu: string | default="500m"
            memory: string | default="1Gi"
        service:
          port: integer | default=5432
          targetPort: integer | default=5432
        storage:
          enabled: boolean | default=true
          storageClass: string | default="longhorn"
          size: string | default="3Gi"
          accessMode: string | default="ReadWriteOnce"
      ingress:
        enabled: boolean | default=false
              
  resources:
    # Database Resources
    - id: postgresInitScript
      includeWhen:
        - ${schema.spec.database.enabled}
      template:
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: ${schema.spec.name}-postgres-init
        data:
          init-db.sql: |
            CREATE TABLE IF NOT EXISTS submissions (
              id SERIAL PRIMARY KEY,
              name TEXT NOT NULL,
              email TEXT NOT NULL,
              created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );

    - id: persistentVolumeClaim
      includeWhen:
        - ${schema.spec.database.enabled}
        - ${schema.spec.database.storage.enabled}
      template:
        apiVersion: v1
        kind: PersistentVolumeClaim
        metadata:
          name: ${schema.spec.database.name}-pvc
        spec:
          accessModes:
            - ${schema.spec.database.storage.accessMode}
          storageClassName: ${schema.spec.database.storage.storageClass}
          resources:
            requests:
              storage: ${schema.spec.database.storage.size}

    - id: postgresStatefulSet
      includeWhen:
        - ${schema.spec.database.enabled}
      template:
        apiVersion: apps/v1
        kind: StatefulSet
        metadata:
          name: ${schema.spec.database.name}
        spec:
          selector:
            matchLabels:
              app: ${schema.spec.database.name}
          serviceName: ${schema.spec.database.name}-svc
          replicas: ${schema.spec.database.replicas}
          template:
            metadata:
              labels:
                app: ${schema.spec.database.name}
            spec:
              containers:
                - name: ${schema.spec.database.name}
                  image: ${schema.spec.database.image}
                  env:
                    - name: POSTGRESQL_DATABASE
                      value: ${schema.spec.database.dbName}
                    - name: POSTGRESQL_USERNAME
                      value: ${schema.spec.database.username}
                    - name: POSTGRESQL_PASSWORD
                      value: ${schema.spec.database.password}
                  ports:
                    - containerPort: ${schema.spec.database.service.targetPort}
                      name: postgres
                  resources:
                    requests:
                      cpu: ${schema.spec.database.resources.requests.cpu}
                      memory: ${schema.spec.database.resources.requests.memory}
                    limits:
                      cpu: ${schema.spec.database.resources.limits.cpu}
                      memory: ${schema.spec.database.resources.limits.memory}

                  volumeMounts:
                    - name: init-script-volume
                      mountPath: /docker-entrypoint-initdb.d
                    - name: postgres-data
                      mountPath: /var/lib/postgresql/data
              volumes:
                - name: init-script-volume
                  configMap:
                    name: ${schema.spec.name}-postgres-init
                - name: postgres-data
                  persistentVolumeClaim:
                    claimName: ${schema.spec.database.name}-pvc

    - id: postgresService
      includeWhen:
        - ${schema.spec.database.enabled}
      template:
        apiVersion: v1
        kind: Service
        metadata:
          name: ${schema.spec.database.name}-svc
        spec:
          selector:
            app: ${schema.spec.database.name}
          ports:
            - port: ${schema.spec.database.service.port}
              targetPort: ${schema.spec.database.service.targetPort}

    # Application Resources
    - id: appDeployment
      includeWhen:
        - ${schema.spec.app.enabled}
      template:
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: ${schema.spec.app.name}
        spec:
          # replicas: ${schema.spec.app.replicas}
          selector:
            matchLabels:
              app: ${schema.spec.app.name}
          template:
            metadata:
              labels:
                app: ${schema.spec.app.name}
            spec:
              imagePullSecrets:
                - name: regcred
              containers:
                - name: ${schema.spec.app.name}
                  image: ${schema.spec.app.image}
                  imagePullPolicy: Always
                  ports:
                    - containerPort: ${schema.spec.app.service.targetPort}
                      name: app-port
                  resources:
                    requests:
                      cpu: ${schema.spec.app.resources.requests.cpu}
                      memory: ${schema.spec.app.resources.requests.memory}
                    limits:
                      cpu: ${schema.spec.app.resources.limits.cpu}
                      memory: ${schema.spec.app.resources.limits.memory}
                  env:
                    - name: PGHOST
                      value: ${schema.spec.database.name}-svc
                    - name: PGUSER
                      value: ${schema.spec.database.username}
                    - name: PGPASSWORD
                      value: ${schema.spec.database.password}
                    - name: PGDATABASE
                      value: ${schema.spec.database.dbName}
                    - name: PGPORT
                      value: "5432"
                    - name: PORT
                      value: "8086"

    - id: appService
      includeWhen:
        - ${schema.spec.app.enabled}
      template:
        apiVersion: v1
        kind: Service
        metadata:
          name: ${schema.spec.app.name}-svc
        spec:
          type: ${schema.spec.app.service.type}
          selector:
            app: ${schema.spec.app.name}
          ports:
            - port: ${schema.spec.app.service.port}
              targetPort: ${schema.spec.app.service.targetPort}

    - id: appHPA
      includeWhen:
        - ${schema.spec.app.enabled}
        - ${schema.spec.app.hpa.enabled}
      template:
        apiVersion: autoscaling/v2
        kind: HorizontalPodAutoscaler
        metadata:
          name: ${schema.spec.app.name}-hpa
        spec:
          scaleTargetRef:
            apiVersion: apps/v1
            kind: Deployment
            name: ${schema.spec.app.name}
          minReplicas: ${schema.spec.app.hpa.minReplicas}
          maxReplicas: ${schema.spec.app.hpa.maxReplicas}
          metrics:
            - type: Resource
              resource:
                name: cpu
                target:
                  type: Utilization
                  averageUtilization: ${schema.spec.app.hpa.targetCPUUtilizationPercentage}
            - type: Resource
              resource:
                name: memory
                target:
                  type: Utilization
                  averageUtilization: ${schema.spec.app.hpa.targetMemoryUtilizationPercentage}
          behavior:
            # Scale up behavior
            scaleUp:
              stabilizationWindowSeconds: 60
              policies:
                - type: Percent
                  value: 100
                  periodSeconds: 60
                - type: Pods
                  value: 2
                  periodSeconds: 60
              selectPolicy: Max
            # Scale down behavior
            scaleDown:
              stabilizationWindowSeconds: 300
              policies:
                - type: Percent
                  value: 50
                  periodSeconds: 60

    # Ingress Resource
    - id: ingress
      includeWhen:
        - ${schema.spec.app.enabled}
        - ${schema.spec.app.ingress.enabled}
        # - ${schema.spec.ingress.enabled}
      template:
        apiVersion: networking.k8s.io/v1
        kind: Ingress
        metadata:
          name: ${schema.spec.name}-ingress
        spec:
          rules:
            - http:
                paths:
                  - path: "/"
                    pathType: Prefix
                    backend:
                      service:
                        name: ${schema.spec.app.name}-svc
                        port:
                          number: ${schema.spec.app.service.port}


