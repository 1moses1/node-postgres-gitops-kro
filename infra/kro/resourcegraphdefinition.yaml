# resourcegraphdefinition.yaml
apiVersion: kro.run/v1alpha1
kind: ResourceGraphDefinition
metadata:
  name: form-postgres-rgd
spec:
  schema:
    apiVersion: v1alpha1
    kind: FormApp
    spec:
      name: string
      image: string | default=""
      db: boolean | default=false
      isApp: boolean | default=false
      isDb: boolean | default=false
      ingress:
        enabled: boolean | default=false
      service:
          type: string | default="ClusterIP"
      storage:
        enabled: boolean | default=false
        storageClass: string | default="longhorn"
        size: string | default="1Gi"
        accessMode: string | default="ReadWriteOnce"
      securityContext:
        fsGroup: integer | default=1001
        runAsUser: integer | default=1001 
        runAsGroup: integer | default=1001 
      initContainer:
        enabled: boolean | default=false
        image: string | default="busybox"
        command: array | default=["chown", "-R", "1001:1001", "/bitnami/postgresql/data"]
        mountPath: string | default="/bitnami/postgresql/data"


  resources:
    - id: postgresInitScript
      includeWhen:
        - ${schema.spec.isDb}
      template:
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: formapp-postgres-init
        data:
          init-db.sql: |
            CREATE TABLE IF NOT EXISTS submissions (
              id SERIAL PRIMARY KEY,
              name TEXT NOT NULL,
              email TEXT NOT NULL,
              created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );

    - id: persistentVolumeClaim
      includeWhen:
        - ${schema.spec.storage.enabled}
        - ${schema.spec.isDb}
      template:
        apiVersion: v1
        kind: PersistentVolumeClaim
        metadata:
          name: ${schema.spec.name}-pvc
        spec:
          accessModes:
            - ${schema.spec.storage.accessMode}
          storageClassName: ${schema.spec.storage.storageClass}
          resources:
            requests:
              storage: ${schema.spec.storage.size}

    - id: deployment
      includeWhen:
        - ${schema.spec.isApp}
      template:
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: ${schema.spec.name}
        spec:
          replicas: 2
          selector:
            matchLabels:
              app: ${schema.spec.name}
          template:
            metadata:
              labels:
                app: ${schema.spec.name}
            spec:
              # securityContext:
              #   fsGroup: ${schema.spec.securityContext.fsGroup}
              #   runAsUser: ${schema.spec.securityContext.runAsUser}  # Added
              #   runAsGroup: ${schema.spec.securityContext.runAsGroup}  # Added      
              containers:
                - name: ${schema.spec.name}
                  image: ${schema.spec.image}
                  imagePullPolicy: Always
                  ports:
                    - containerPort: 8086
                  env:
                    - name: PGHOST
                      value: postgres-svc
                    - name: PGUSER
                      value: postgres
                    - name: PGPASSWORD
                      value: postgres
                    - name: PGDATABASE
                      value: formdb
                    - name: PGPORT
                      value: "5432"
                    - name: PORT
                      value: "8086"
                  # readinessProbe:
                  #   httpGet:
                  #     path: /
                  #     port: 8086
                  #   initialDelaySeconds: 10
                  #   periodSeconds: 5
                  # livenessProbe:
                  #   httpGet:
                  #     path: /
                  #     port: 8086
                  #   initialDelaySeconds: 15
                  #   periodSeconds: 10

    - id: appService
      includeWhen:
        - ${schema.spec.isApp}
      template:
        apiVersion: v1
        kind: Service
        metadata:
          name: ${schema.spec.name}-svc
        spec:
          type: ${schema.spec.service.type}
          selector:
            app: ${schema.spec.name}
          ports:
            - port: 8086
              targetPort: 8086

    - id: statefulset
      includeWhen:
        - ${schema.spec.isDb}
      template:
        apiVersion: apps/v1
        kind: StatefulSet
        metadata:
          name: ${schema.spec.name}
        spec:
          selector:
            matchLabels:
              app: ${schema.spec.name}
          serviceName: ${schema.spec.name}-svc
          replicas: 1
          template:
            metadata:
              labels:
                app: ${schema.spec.name}
            spec:
              # Remove explicit securityContext to let Bitnami image handle it
              # securityContext:
              #   fsGroup: ${schema.spec.securityContext.fsGroup}
              #   runAsUser: ${schema.spec.securityContext.runAsUser}  # Added
              #   runAsGroup: ${schema.spec.securityContext.runAsGroup}  # Added
              initContainers:
                - name: init-permissions
                  image: ${schema.spec.initContainer.image}
                  command: ${schema.spec.initContainer.command}
                  volumeMounts:
                    - name: postgres-data
                      mountPath: ${schema.spec.initContainer.mountPath}
              containers:
                - name: ${schema.spec.name}
                  image: bitnami/postgresql:12.1.0
                  env:
                    - name: POSTGRESQL_DATABASE
                      value: formdb
                    - name: POSTGRESQL_USERNAME
                      value: postgres
                    - name: POSTGRESQL_PASSWORD
                      value: postgres
                    # - name: PGDATABASE
                    #   value: /bitnami/postgresql/data
                  ports:
                    - containerPort: 5432
                  volumeMounts:
                    - name: init-script-volume
                      mountPath: /docker-entrypoint-initdb.d
                    - name: postgres-data
                      mountPath: /bitnami/postgresql/data
                      # Mount specifically to the data directory, not the parent
              volumes:
                - name: init-script-volume
                  configMap:
                    name: formapp-postgres-init
                - name: postgres-data
                  persistentVolumeClaim:
                    claimName: ${schema.spec.name}-pvc

    - id: postgresService
      includeWhen:
        - ${schema.spec.isDb}
      template:
        apiVersion: v1
        kind: Service
        metadata:
          name: ${schema.spec.name}-svc
        spec:
          selector:
            app: ${schema.spec.name}
          ports:
            - port: 5432
              targetPort: 5432

    - id: ingress
      includeWhen:
        - ${schema.spec.ingress.enabled}
      template:
        apiVersion: networking.k8s.io/v1
        kind: Ingress
        metadata:
          name: ${schema.spec.name}-ingress
        spec:
          rules:
            - http:
                paths:
                  - path: "/"
                    pathType: Prefix
                    backend:
                      service:
                        name: ${schema.spec.name}-svc
                        port:
                          number: 8086
